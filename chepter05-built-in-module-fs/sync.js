/*
  * [동기 메서드와 비동기 메서드]
  * setTimeout 같은 타이머와 process.nextTick 외에도 노드는 대부분의 메서드를 비동기 방식으로 처러한다.
  * 하지만 몇몇 메서드는 동기 방식으로 사용할 수 있다.
  * 특히 fs 모듈이 그러한 메서드를 많이 가지고 있다.
  * 어떤 메섣가 동기 또는 비동기 방식으로 동작하는지와 언제 어떤 메서드를 사용하는지 알아보자.
*/

const fs = require('fs');

// [파일 하나를 여러번 읽기] - 동기 - 순서 보장 O
console.log('시작');

let data = fs.readFileSync('./readme2.txt');
console.log('1번', data.toString());
data = fs.readFileSync('./readme2.txt');
console.log('2번', data.toString());
data = fs.readFileSync('./readme2.txt');
console.log('3번', data.toString());

console.log('끝');

/*
  * readFileSync 메서드를 사용하면 콜백함수를 넣는 대신에 직접 return 값을 받아 올 수 있다.
  * 코드는 훨씬 더 이해하기 쉽지만 치명적인 단점이 있다.
  * 요청이 수백 개 이상 들어올 때 성능이 문제가 생긴다.
  * 
  * Sync 메서드를 사용했을 때는 이전 작업이 완료되어야 다음 작업을 진행할 수 있다.
  * 즉, 백그라운드가 작업하는 동안 메인 스레드는 아무것도 하지 못하고 대기하고 있어야한다.
  * 메인 스레드가 일을 하지 않고 노는 시간이 생기므로 비효율적이다.
  * 백그라운드는 fs 작업을 동시에 처리할 수도 있는데 Sync 메서드를 사용하면 백그라운드조차 동시에 처리할 수 없게 된다.
  * 비동기 fs 메서드를 사용하면 백그라운드가 동시에 작업할 수 있고, 메인 스레드는 다음 작업을 처리할 수 있다.
  * 
  * 동기 메서드들은 이름 뒤에 Sync가 붙어 있어 구분이 쉽다.
  * writeFileSync 메서드도 있다.
  * 하지만 동기 메서드를 사용하는 경우는 극히 드물다.
  * 프로그램을 처음 실행할 때 초기화 용도로만 사용하는 것을 권장한다.
  * 대부분의 경우 비동기 메서드가 훨씬 더 효율적이다.
*/